{"version":3,"file":"static/webpack/static/development/pages/app.js.28772ddc3a4517786e16.hot-update.js","sources":["webpack:///./components/Flight.js"],"sourcesContent":["import React, { Component } from 'react';\nimport fake from '../fake';\nimport {LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend} from 'recharts';\nimport {format} from 'date-fns';\n\nimport fetch from 'isomorphic-unfetch';\n\n\n\nfunction pathArrayToObject(path){\n    let formatedPaths = [];\n    path.forEach(p=>{\n        formatedPaths .push({\n            time: format(new Date(p[0]*1000), 'HH:mm'),\n            barAlt: p[3] ? p[3] : 0,\n            lat: p[1],\n            lng: p[2],\n        })\n    })\n    return formatedPaths\n}\n\n\n\nvar trackPollInterval;\n\n\nclass Flight extends Component {\n\n    state = {\n        trackData: []\n    }\n\n\n    componentDidMount(){\n        this.updateFlightTrack();\n        this.trackPollInterval = setInterval(this.updateFlightTrack.bind(this), 10000);\n    }\n\n    componentWillUnmount(){\n        console.log(\"clearing\")\n        clearInterval(this.trackPollInterval)\n    }\n\n\n    async updateFlightTrack(){\n        var trackData\n        console.log()\n        return fetch(this.props.flight.trackUrl, { headers: { 'origin': 'x-requested-with'} })\n            .then(res => res.json())\n            .then(res => {\n                if(res.icao24){\n                trackData = pathArrayToObject(res.path);\n                } else {\n                //TODO: inject fake data here if there was no data yet else use the old data, and add a random point from fake dataset\n                // \n                trackData = fake;\n                }\n            })\n            .then(()=>{\n                this.setState({\n                    trackData\n                })\n            })\n            .catch((error) => {\n                console.log(error.message)\n            })\n    }\n\n\n    render(){\n        const { flight, open, children } = this.props;\n        let chartData = pathArrayToObject(flight.path);\n        return (\n            <div className=\"flight\">\n                \n                {children}\n                <div  style={{zIndex: this.state.open ? 99999999999999999 : 1}}  className={open ? 'plane-info open': 'plane-info'}>\n                    <div className=\"info-top\">\n                        <h2 className=\"hlght\">{flight.callsign ? flight.callsign :flight.icao24 }</h2>\n                        <svg  className=\"api-svg\" viewBox=\"0 0 100 100\"><circle r=\"24\" cy=\"26\" cx=\"50\" fill=\"#1A1A1A\"></circle><circle className=\"progress-svg\" r=\"18\" cy=\"26\" cx=\"50\" fill=\"transparent\" stroke=\"#00BCFF\" strokeWidth=\"8\"></circle></svg>\n                    </div>\n      \n                    <div>\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td className=\"hlght\">LAT</td>\n                                    <td>{flight.lat}</td>\n                                </tr>\n                                <tr>\n                                    <td className=\"hlght\">LNG</td>\n                                    <td>{flight.lng}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n\n                        <table>\n                            <tbody>\n                                <tr>\n                                    <td className=\"hlght\">ALT</td>\n                                    <td>{flight.geoAlt ? flight.geoAlt : 0}</td>\n                                </tr>\n                                <tr>\n                                    <td className=\"hlght\">TRANS</td>\n                                    <td>{flight.icao24}</td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n\n                    <LineChart width={300} height={150} data={this.state.trackData}\n                                margin={{top: 10, right: 10, left: -15, bottom: 10}}>\n                        <XAxis dataKey=\"time\"/>\n                        <YAxis/>\n                        {/* <CartesianGrid strokeDasharray=\"1 1\" /> */}\n                        <Tooltip \n                        labelStyle={{\n                            background: '#262626'\n                        }}\n                        contentStyle={{\n                            background: '#262626'\n                        }}\n                        \n                        \n                        />\n                        {/* <Legend /> */}\n                        <Line dot={false} type=\"monotone\" dataKey=\"barAlt\" stroke=\"#14736F\" />\n                    </LineChart>\n\n                </div>\n            </div>\n          );\n    }\n}\n\n\n\nexport default Flight\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;AAEA;AACA;AADA;AACA;;;;;;AAIA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AAGA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAIA;AAAA;AASA;AAAA;AAIA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAWA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AA1GA;AACA;AA8GA;;;;A","sourceRoot":""}